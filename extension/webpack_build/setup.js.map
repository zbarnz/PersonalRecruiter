{"version":3,"file":"setup.js","mappings":";;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACrtHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://extension/./build/lib/utils/math.js","webpack://extension/./build/lib/utils/waits.js","webpack://extension/webpack/bootstrap","webpack://extension/webpack/runtime/define property getters","webpack://extension/webpack/runtime/hasOwnProperty shorthand","webpack://extension/webpack/runtime/make namespace object","webpack://extension/./build/content_scripts/indeed/processes/setup.js"],"sourcesContent":["export function calculateYearlySalary(frequency, amount) {\n    switch (frequency.toLowerCase()) {\n        case \"annual\": //dice\n        case \"year\": //indeed\n            return amount;\n        case \"monthly\": //dice\n        case \"month\": //indeed\n            return amount * 12;\n        case \"hourly\": //dice\n        case \"hour\": //indeed\n            // Assuming a 40-hour work week and 52 weeks in a year\n            return amount * 40 * 52;\n        default:\n            return 1337;\n    }\n}\nexport function getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min) + min);\n}\n//# sourceMappingURL=math.js.map","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getRandomInt } from \"./math\";\n/**\n * Performs a short, random wait period to simulate human-like delays between actions.\n * The wait period ranges between 2 to 5 seconds.\n */\nexport function shortWait() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, getRandomInt(2000, 5000)));\n    });\n}\n/**\n * Performs a tiny, random wait period to simulate human-like delays between actions.\n * The wait period ranges between 0.5 to 1.5 seconds.\n */\nexport function tinyWait() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, getRandomInt(500, 1500)));\n    });\n}\n/**\n * Performs a medium, random wait period to simulate human-like delays between actions.\n * The wait period ranges between 5 to 10 seconds.\n */\nexport function mediumWait() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, getRandomInt(5000, 10000)));\n    });\n}\n/**\n * Performs a medium, random wait period to simulate human-like delays between actions.\n * The wait period ranges between 7 to 15 seconds.\n */\nexport function longWait() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, getRandomInt(7000, 15000)));\n    });\n}\nexport function waitForElement(selector, checkCloudflare, timeout = 30000) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve, reject) => {\n            const startTime = Date.now();\n            const check = () => {\n                let cfEl;\n                const el = document.querySelector(selector);\n                if (checkCloudflare) {\n                    cfEl = document.querySelector(\"#challenge-stage\");\n                }\n                if (el) {\n                    resolve(el);\n                }\n                else if (cfEl) {\n                    resolve(\"cloudflare\");\n                }\n                else if (Date.now() - startTime > timeout) {\n                    reject(new Error(`Timeout waiting for ${selector}`));\n                }\n                else {\n                    setTimeout(check, 200); // check every 100ms\n                }\n            };\n            console.log(\"checking element...\");\n            check();\n        });\n    });\n}\nexport function waitForNavigationComplete(timeout = 30000) {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(\"in navigation wait\");\n        return new Promise((resolve, reject) => {\n            const timeoutId = setTimeout(() => {\n                reject(new Error(\"Navigation timeout\"));\n            }, timeout);\n            chrome.runtime.onMessage.addListener(function listener(request) {\n                console.log(\"navigation wait listener triggereqd\");\n                if (request.action === \"navigateComplete\") {\n                    clearTimeout(timeoutId);\n                    chrome.runtime.onMessage.removeListener(listener);\n                    resolve();\n                }\n            });\n        });\n    });\n}\n// Define a function to wait for the URL to change to the expected URL\nexport function waitForURL(expectedPattern, timeout = 600000) {\n    return new Promise((resolve, reject) => {\n        const startTime = Date.now();\n        const regex = typeof expectedPattern === \"string\"\n            ? new RegExp(expectedPattern)\n            : expectedPattern;\n        const checkUrl = () => {\n            console.log(\"checking url\");\n            console.log(regex);\n            if (regex.test(window.location.href)) {\n                console.log(\"resolved\");\n                resolve();\n            }\n            else if (Date.now() - startTime > timeout) {\n                console.log(\"rejected\");\n                reject(new Error(`Timeout reached waiting for URL pattern: ${expectedPattern}`));\n            }\n            else {\n                console.log(\"try again\");\n                setTimeout(checkUrl, 100); // Check every 100ms\n            }\n        };\n        checkUrl();\n    });\n}\n//# sourceMappingURL=waits.js.map","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { waitForURL, waitForElement, shortWait, } from \"../../../lib/utils/waits\";\nfunction generateUniqueNavId() {\n    const currentTime = new Date().getTime(); // Current time in milliseconds\n    const randomComponent = Math.random().toString(36).substring(2, 15); // A random string\n    const navId = `nav-${currentTime}-${randomComponent}`;\n    return navId;\n}\nconst SITE_NAME = \"Indeed\";\nconsole.log(\"loading FINAL \" + Date.now() / 1000);\n/*\nThe below listeners are added in the order they are\nexected to be triggered\n*/\nchrome.runtime.onMessage.addListener(newTabListener);\nchrome.runtime.onMessage.addListener(checkSignedInListener);\nfunction newTabListener(message, sender, sendResponse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (message.message == \"newTab\") {\n            console.log(\"received new tab message\");\n            yield waitForURL(`^https:\\/\\/www\\.indeed\\.com\\/.*`, 10000);\n            const element = yield waitForElement(\".gnav\", true);\n            yield shortWait();\n            if (element == \"cloudflare\") {\n                const cloudflareMessage = {\n                    message: \"cloudFlareDetected\",\n                };\n                console.log(\"cloudflare Detected\");\n                chrome.runtime.sendMessage(cloudflareMessage);\n                return;\n            }\n            const completeMessage = {\n                message: \"newTabComplete\",\n            };\n            console.log(\"sending newtab complete message\");\n            console.log(completeMessage);\n            yield chrome.runtime.sendMessage(completeMessage);\n        }\n        // Optionally send a response\n        sendResponse({ status: \"Received\" });\n    });\n}\nfunction checkSignedInListener(message, sender, sendResponse) {\n    return __awaiter(this, void 0, void 0, function* () {\n        console.log(message);\n        let tabId = message.tabId;\n        function checkSignedIn() {\n            console.log(\"Checking if signed in\");\n            const signInButtonSelector = 'div[data-gnav-element-name=\"SignIn\"] a';\n            const navSelector = \".gnav\";\n            const signInButton = document.querySelector(signInButtonSelector);\n            console.log(signInButton);\n            if (signInButton) {\n                return false;\n            }\n            else {\n                return true;\n            }\n        }\n        let isSignedIn = checkSignedIn();\n        if (message.message == \"checkSignedIn\") {\n            if (isSignedIn) {\n                console.log(\"Already signed in\");\n            }\n            else {\n                yield signIn(tabId).catch(console.error);\n            }\n        }\n        if (message.message == \"checkSignedInFinal\") {\n            if (isSignedIn) {\n                console.log(\"Succesfully signed in\");\n                window.location.href = \"www.indeed.com\";\n            }\n            else {\n                console.error(\"User still not signed in\");\n                chrome.runtime.onMessage.removeListener(checkSignedInListener);\n            }\n        }\n        // Optionally send a response\n        sendResponse({ status: \"Received\" });\n    });\n}\nfunction signIn(tabId) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            chrome.runtime.sendMessage({\n                action: \"showNotification\",\n                message: `Please Sign in to ${SITE_NAME}`,\n                title: \"Action Needed\",\n            });\n            chrome.runtime.sendMessage({ message: \"startListeningForSignIn\" }, () => {\n                window.location.href = \"https://secure.indeed.com/auth\";\n            });\n        }\n        catch (err) {\n            console.log(err);\n        }\n    });\n}\n// async function listeningForSignInListener(\n//   message: any,\n//   sender: chrome.runtime.MessageSender,\n//   sendResponse: (response: any) => void\n// ) {\n//   if (message.message == \"listeningForSignIn\") {\n//     window.location.href = \"https://secure.indeed.com/auth\";\n//   }\n// }\n//# sourceMappingURL=setup.js.map"],"names":[],"sourceRoot":""}